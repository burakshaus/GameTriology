/*
* Copyright (C) 2014  Arjun Sreedharan
* License: GPL version 2 or higher http://www.gnu.org/licenses/gpl.html
*/
#include "keyboard_map.h"

/* there are 25 lines each of 80 columns; each element takes 2 bytes */
#define LINES 25
#define COLUMNS_IN_LINE 80
#define BYTES_FOR_EACH_ELEMENT 2
#define SCREENSIZE BYTES_FOR_EACH_ELEMENT * COLUMNS_IN_LINE * LINES

#define KEYBOARD_DATA_PORT 0x60
#define KEYBOARD_STATUS_PORT 0x64
#define IDT_SIZE 256
#define INTERRUPT_GATE 0x8e
#define KERNEL_CODE_SEGMENT_OFFSET 0x08

#define ENTER_KEY_CODE 0x1C

#define DINO_CHAR 'D'
#define OBSTACLE_CHAR '|'
#define GROUND_CHAR '_'
#define EMPTY_CHAR ' '

int score = 0;
int game+over = 0;

int dino_row = 22;      // Ground level
int dino_col = 5;
int jump_height = 5;
int jump = 0;
int jump_frame = 0;

int obs_col = 79;       // Right edge
int obs_row = 22;

void draw_char_at(int row, int col, char c) {
    int pos = 2 * (row * COLUMNS_IN_LINE + col);
    vidptr[pos] = c;
    vidptr[pos + 1] = 0x07;
}

void draw_ground() {
    for (int i = 0; i < COLUMNS_IN_LINE; i++) {
        draw_char_at(23, i, GROUND_CHAR);
    }
}

void draw_dino() {
    draw_char_at(dino_row, dino_col, DINO_CHAR);
}

void draw_obstacle() {
    draw_char_at(obs_row, obs_col, OBSTACLE_CHAR);
}

void clear_char_at(int row, int col) {
    draw_char_at(row, col, EMPTY_CHAR);
}

extern unsigned char keyboard_map[128];
extern void keyboard_handler(void);
extern char read_port(unsigned short port);
extern void write_port(unsigned short port, unsigned char data);
extern void load_idt(unsigned long *idt_ptr);

/* current cursor location */
unsigned int current_loc = 0;
/* video memory begins at address 0xb8000 */
char *vidptr = (char*)0xb8000;

struct IDT_entry {
	unsigned short int offset_lowerbits;
	unsigned short int selector;
	unsigned char zero;
	unsigned char type_attr;
	unsigned short int offset_higherbits;
};

struct IDT_entry IDT[IDT_SIZE];


void idt_init(void)
{
	unsigned long keyboard_address;
	unsigned long idt_address;
	unsigned long idt_ptr[2];

	/* populate IDT entry of keyboard's interrupt */
	keyboard_address = (unsigned long)keyboard_handler;
	IDT[0x21].offset_lowerbits = keyboard_address & 0xffff;
	IDT[0x21].selector = KERNEL_CODE_SEGMENT_OFFSET;
	IDT[0x21].zero = 0;
	IDT[0x21].type_attr = INTERRUPT_GATE;
	IDT[0x21].offset_higherbits = (keyboard_address & 0xffff0000) >> 16;

	/*     Ports
	*	 PIC1	PIC2
	*Command 0x20	0xA0
	*Data	 0x21	0xA1
	*/

	/* ICW1 - begin initialization */
	write_port(0x20 , 0x11);
	write_port(0xA0 , 0x11);

	/* ICW2 - remap offset address of IDT */
	/*
	* In x86 protected mode, we have to remap the PICs beyond 0x20 because
	* Intel have designated the first 32 interrupts as "reserved" for cpu exceptions
	*/
	write_port(0x21 , 0x20);
	write_port(0xA1 , 0x28);

	/* ICW3 - setup cascading */
	write_port(0x21 , 0x00);
	write_port(0xA1 , 0x00);

	/* ICW4 - environment info */
	write_port(0x21 , 0x01);
	write_port(0xA1 , 0x01);
	/* Initialization finished */

	/* mask interrupts */
	write_port(0x21 , 0xff);
	write_port(0xA1 , 0xff);

	/* fill the IDT descriptor */
	idt_address = (unsigned long)IDT ;
	idt_ptr[0] = (sizeof (struct IDT_entry) * IDT_SIZE) + ((idt_address & 0xffff) << 16);
	idt_ptr[1] = idt_address >> 16 ;

	load_idt(idt_ptr);
}

void kb_init(void)
{
	/* 0xFD is 11111101 - enables only IRQ1 (keyboard)*/
	write_port(0x21 , 0xFD);
}

void kprint(const char *str)
{
	unsigned int i = 0;
	while (str[i] != '\0') {
		vidptr[current_loc++] = str[i++];
		vidptr[current_loc++] = 0x07;
	}
}

void kprint_newline(void)
{
	unsigned int line_size = BYTES_FOR_EACH_ELEMENT * COLUMNS_IN_LINE;
	current_loc = current_loc + (line_size - current_loc % (line_size));
}

void print_score() {
    const char *label = "Score: ";
    int i = 0;
    unsigned int pos = 0;  // Top-left

    // Clear old score area
    for (int j = 0; j < 20; j++) {
        vidptr[pos++] = ' ';
        vidptr[pos++] = 0x07;
    }

    // Print label
    pos = 0;
    while (label[i] != '\0') {
        vidptr[pos++] = label[i++];
        vidptr[pos++] = 0x07;
    }

    // Convert score to string and print it
    int temp = score;
    char buf[10];
    int idx = 0;

    if (temp == 0) {
        buf[idx++] = '0';
    } else {
        while (temp > 0 && idx < 9) {
            buf[idx++] = '0' + (temp % 10);
            temp /= 10;
        }
    }

    // Reverse and print the score digits
    for (int j = idx - 1; j >= 0; j--) {
        vidptr[pos++] = buf[j];
        vidptr[pos++] = 0x07;
    }
}

void reset_game() {
    clear_char_at(dino_row, dino_col);
    clear_char_at(obs_row, obs_col);
    score = 0;
    dino_row = 22;
    obs_col = 79;
    jump = 0;
    jump_frame = 0;
    game_over = 0;
    current_loc = 0;
    clear_screen();
    kprint("Restarted!");
    kprint_newline();
    draw_ground();
}


void clear_screen(void)
{
	unsigned int i = 0;
	while (i < SCREENSIZE) {
		vidptr[i++] = ' ';
		vidptr[i++] = 0x07;
	}
}

void keyboard_handler_main(void)
{
	unsigned char status;
	char keycode;

	/* write EOI */
	write_port(0x20, 0x20);

	status = read_port(KEYBOARD_STATUS_PORT);
	/* Lowest bit of status will be set if buffer is not empty */
	if (status & 0x01) {
		keycode = read_port(KEYBOARD_DATA_PORT);
		if(keycode < 0)
			return;

		if(keycode == ENTER_KEY_CODE) {
			kprint_newline();
			return;
		}
		
		else if (keyboard_map[(unsigned char) keycode] == ' ') {
    if (game_over) {
        reset_game();
    } else if (!jump) {
        jump = 1;
        jump_frame = 0;
    }
}

}

//vidptr[current_loc++] = keyboard_map[(unsigned char) keycode];
//vidptr[current_loc++] = 0x07;

// Do not print keys directly to screen â€” we handle input manually now


	
}

void kmain(void)
{
	const char *str = "my first kernel with keyboard support";
	clear_screen();
	kprint(str);
	kprint_newline();
	kprint_newline();

	idt_init();
	kb_init();
        
        while (1) {
    if (!game_over) {
        clear_char_at(dino_row, dino_col);
        clear_char_at(obs_row, obs_col);

        if (jump) {
            if (jump_frame < 5) {
                dino_row--;
            } else if (jump_frame < 10) {
                dino_row++;
            } else {
                jump = 0;
                jump_frame = 0;
            }
            jump_frame++;
        }

        obs_col--;
        if (obs_col < 0) obs_col = 79;

        if (obs_col == dino_col && dino_row == obs_row) {
            kprint_newline();
            kprint("Game Over!");
            kprint_newline();
            print_score();
            game_over = 1;
            continue;
        }

        draw_dino();
        draw_obstacle();
        draw_ground();

        score++;
        print_score();
    }

    for (volatile int i = 0; i < 1000000; i++);
}


}
